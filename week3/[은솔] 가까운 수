// array의 요소들에서 n을 뺀 값의 절대값이 가장 작은 수를 반환
// 1. array의 요소들에서 n을 뺀 값에 절대값을 주어 새로운 배열에 추가
// 2. 새로운 배열에서 최솟값 찾기
// 3. 최솟값을 가진 수를 본래 배열에서 index 반환
// 4. 가까운 수가 여러개일 경우 최솟값을 반환

function solution(array, n) {
    let answer = 0;
    let answerList = []; // 정답리스트 (가까운 수가 여러개일 경우)
    let absMinList = []; // 차의 절대값의 최솟값이 있는 인덱스를 담는 배열
    let newArray = []; // 차의 절대값을 담는 배열
    for(i=0; i<array.length; i++){
        const differ = array[i] - n // 요소에서 n을 뺀 값의 차이를 differ로 지정
        newArray.push(Math.abs(differ)); // differ의 절대값을 newArray에 푸쉬
    }
    const minNum = Math.min(...newArray); // newArray의 최솟값을 minNum으로지정 (차의 절대값의 최솟값)
    for(i=0; i<newArray.length; i++){ // newArray의 길이만큼 반복
        if(newArray[i] == minNum){ // newArray 요소와 minNum이 같은 경우
            absMinList.push(i); // absMinList에 해당 index를 푸쉬
        }
    }
    if(absMinList.length == 1){ // 가까운 수가 한개일 경우
        const answerIndex = absMinList[0] 
         answer = array[answerIndex] // 가까운 수를 answer로 지정
    }else{
         for(i=0; i<absMinList.length; i++){ // 가까운 수가 여러개인 경우 차의 절대값의 최솟값이 있는 index가 푸쉬된 리스트의 길이만큼 반복
            const minIndex = absMinList[i];
            answerList.push(array[minIndex]); // 정답리스트에 인덱스 순대로 담음
        }
        answer = Math.min(...answerList); // 정답리스트의 최솟값을 answer로 지정
    }       
    console.log(answer);
    return answer;
}
